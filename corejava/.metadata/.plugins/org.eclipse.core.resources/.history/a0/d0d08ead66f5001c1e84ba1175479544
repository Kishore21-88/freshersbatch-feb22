package corejava.assignment.lamda;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


class Fruit {
	private String name;
	private int calories;
	private int price;
	private String color;
	public Fruit() {
		super();
		
	}
	public Fruit(String name, int calories, int price, String color) {
		super();
		this.name = name;
		this.calories = calories;
		this.price = price;
		this.color = color;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getCalories() {
		return calories;
	}
	public void setCalories(int calories) {
		this.calories = calories;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	@Override
	public String toString() {
		return "Fruit [name=" + name + ", calories=" + calories + ", price=" + price + ", color=" + color + "]";
	}

}

class News {
	private int newsld;
	private String postedByUser;
	private String commentByUser;
	private String comment;
	public News() {
		super();
	}
	public News(int newsld, String postedByUser, String commentByUser, String comment) {
		super();
		this.newsld = newsld;
		this.postedByUser = postedByUser;
		this.commentByUser = commentByUser;
		this.comment = comment;
	}
	public int getNewsld() {
		return newsld;
	}
	public void setNewsld(int newsld) {
		this.newsld = newsld;
	}
	public String getPostedByUser() {
		return postedByUser;
	}
	public void setPostedByUser(String postedByUser) {
		this.postedByUser = postedByUser;
	}
	public String getCommentByUser() {
		return commentByUser;
	}
	public void setCommentByUser(String commentByUser) {
		this.commentByUser = commentByUser;
	}
	public String getComment() {
		return comment;
	}
	public void setComment(String comment) {
		this.comment = comment;
	}
	@Override
	public String toString() {
		return "News [newsld=" + newsld + ", postedByUser=" + postedByUser + ", commentByUser=" + commentByUser
				+ ", comment=" + comment + "]";
	}
	
}

class Trader {
	private String name;
	private String city;
	public Trader() {
		super();
		
	}
	public Trader(String name, String city) {
		super();
		this.name = name;
		this.city = city;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	@Override
	public String toString() {
		return "Trader [name=" + name + ", city=" + city + "]";
	}
	
	
}

class Transaction {
	private Trader trader;
	private int year;
	private int value;
	public Transaction() {
		super();
		
	}
	public Transaction(Trader trader, int year, int value) {
		super();
		this.trader = trader;
		this.year = year;
		this.value = value;
	}
	public Trader getTrader() {
		return trader;
	}
	public void setTrader(Trader trader) {
		this.trader = trader;
	}
	public int getYear() {
		return year;
	}
	public void setYear(int year) {
		this.year = year;
	}
	public int getValue() {
		return value;
	}
	public void setValue(int value) {
		this.value = value;
	}
	@Override
	public String toString() {
		return "Transaction [trader=" + trader + ", year=" + year + ", value=" + value + "]";
	}
	
	
}

public class StreamApi 
{
	

	public static void main(String[] args) {
		List<Fruit> al=new ArrayList<Fruit>();
		al.add(new Fruit("apple", 200, 220, "yellow"));
		al.add(new Fruit("orange", 100, 120, "orange"));
		al.add(new Fruit("pinapple", 150, 220, "yellow"));
		al.add(new Fruit("apple", 250, 220, "red"));
		al.add(new Fruit("apple", 50, 220, "red"));
		al.add(new Fruit("graps", 70, 220, "aqua"));
		al.add(new Fruit("pinapple", 100, 220, "red"));
		
		
		List<Fruit> ft = al.stream().filter(b->b.getCalories()<100).collect(Collectors.toList());
		System.out.println(ft);
//		for (int index =ft.size()-1; index >=0 ; index--) {
//			System.out.println(ft.get(index).getName());
//		}
		
		List<String> f = al.stream().map(b->b.getColor()).distinct().sorted().collect(Collectors.toList());
		System.out.println(f);
		List<Fruit> f1 = al.stream().filter(b->b.getColor().equals("red")).sorted(Comparator.comparing(Fruit::getPrice)).collect(Collectors.toList());
			System.out.println(f1);
//		Comparator<Fruit> comp=(s1,s2)->s1.getColor().compareTo(s2.getColor());
//		   Collections.sort( StreamApi.getFruits(),comp);
			List<News> news=new ArrayList<News>();
			news.add(new News(5, "kishore", "kiki", "hmmm"));
			news.add(new News(1, "kishor", "kiki", "hmmm"));
			news.add(new News(2, "kisho", "kiki", "hmmm"));
			news.add(new News(3, "kish", "kiki", "hmmm"));
			news.add(new News(4, "kis", "kiki", "hmmm"));
			news.add(new News(5, "ki", "kiki", "hmmm"));
			news.add(new News(1, "k", "kiki", "hmmm"));
		
		 l = news.stream().max(Comparator.comparing(News::getComment)).map(b->b.getNewsld());
		System.out.println(l);
	}

}
